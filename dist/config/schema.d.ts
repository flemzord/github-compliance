import { z } from 'zod';
export declare const ComplianceConfigSchema: z.ZodObject<{
    version: z.ZodLiteral<1>;
    organization: z.ZodOptional<z.ZodString>;
    defaults: z.ZodObject<{
        merge_methods: z.ZodOptional<z.ZodObject<{
            allow_merge_commit: z.ZodBoolean;
            allow_squash_merge: z.ZodBoolean;
            allow_rebase_merge: z.ZodBoolean;
        }, z.core.$strip>>;
        branch_protection: z.ZodOptional<z.ZodObject<{
            patterns: z.ZodArray<z.ZodString>;
            enforce_admins: z.ZodBoolean;
            required_reviews: z.ZodObject<{
                dismiss_stale_reviews: z.ZodBoolean;
                required_approving_review_count: z.ZodNumber;
                require_code_owner_reviews: z.ZodBoolean;
                require_last_push_approval: z.ZodBoolean;
            }, z.core.$strip>;
            required_status_checks: z.ZodObject<{
                auto_discover: z.ZodBoolean;
                contexts: z.ZodArray<z.ZodString>;
                strict: z.ZodBoolean;
            }, z.core.$strip>;
            restrictions: z.ZodObject<{
                users: z.ZodArray<z.ZodString>;
                teams: z.ZodArray<z.ZodString>;
            }, z.core.$strip>;
            allow_force_pushes: z.ZodBoolean;
            allow_deletions: z.ZodBoolean;
            required_conversation_resolution: z.ZodBoolean;
            lock_branch: z.ZodBoolean;
            allow_fork_syncing: z.ZodBoolean;
        }, z.core.$strip>>;
        security: z.ZodOptional<z.ZodObject<{
            secret_scanning: z.ZodEnum<{
                enabled: "enabled";
                disabled: "disabled";
            }>;
            secret_scanning_push_protection: z.ZodEnum<{
                enabled: "enabled";
                disabled: "disabled";
                auto: "auto";
            }>;
            dependabot_alerts: z.ZodBoolean;
            dependabot_updates: z.ZodBoolean;
            code_scanning_recommended: z.ZodBoolean;
        }, z.core.$strip>>;
        permissions: z.ZodOptional<z.ZodObject<{
            remove_individual_collaborators: z.ZodBoolean;
            teams: z.ZodArray<z.ZodObject<{
                team: z.ZodString;
                permission: z.ZodEnum<{
                    push: "push";
                    read: "read";
                    triage: "triage";
                    write: "write";
                    maintain: "maintain";
                    admin: "admin";
                }>;
            }, z.core.$strip>>;
        }, z.core.$strip>>;
        archived_repos: z.ZodOptional<z.ZodObject<{
            admin_team_only: z.ZodBoolean;
            archive_inactive: z.ZodOptional<z.ZodBoolean>;
            inactive_days: z.ZodOptional<z.ZodNumber>;
            unarchive_active: z.ZodOptional<z.ZodBoolean>;
            archive_patterns: z.ZodOptional<z.ZodArray<z.ZodString>>;
            keep_active_patterns: z.ZodOptional<z.ZodArray<z.ZodString>>;
            specific_repos: z.ZodOptional<z.ZodArray<z.ZodString>>;
        }, z.core.$strip>>;
    }, z.core.$strip>;
    rules: z.ZodOptional<z.ZodArray<z.ZodObject<{
        match: z.ZodObject<{
            repositories: z.ZodOptional<z.ZodArray<z.ZodString>>;
            only_private: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>;
        apply: z.ZodObject<{
            merge_methods: z.ZodOptional<z.ZodObject<{
                allow_merge_commit: z.ZodOptional<z.ZodBoolean>;
                allow_squash_merge: z.ZodOptional<z.ZodBoolean>;
                allow_rebase_merge: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strip>>;
            branch_protection: z.ZodOptional<z.ZodObject<{
                patterns: z.ZodOptional<z.ZodArray<z.ZodString>>;
                enforce_admins: z.ZodOptional<z.ZodBoolean>;
                allow_force_pushes: z.ZodOptional<z.ZodBoolean>;
                allow_deletions: z.ZodOptional<z.ZodBoolean>;
                required_conversation_resolution: z.ZodOptional<z.ZodBoolean>;
                lock_branch: z.ZodOptional<z.ZodBoolean>;
                allow_fork_syncing: z.ZodOptional<z.ZodBoolean>;
                required_reviews: z.ZodOptional<z.ZodObject<{
                    dismiss_stale_reviews: z.ZodOptional<z.ZodBoolean>;
                    required_approving_review_count: z.ZodOptional<z.ZodNumber>;
                    require_code_owner_reviews: z.ZodOptional<z.ZodBoolean>;
                    require_last_push_approval: z.ZodOptional<z.ZodBoolean>;
                }, z.core.$strip>>;
                required_status_checks: z.ZodOptional<z.ZodObject<{
                    auto_discover: z.ZodOptional<z.ZodBoolean>;
                    contexts: z.ZodOptional<z.ZodArray<z.ZodString>>;
                    strict: z.ZodOptional<z.ZodBoolean>;
                }, z.core.$strip>>;
                restrictions: z.ZodOptional<z.ZodObject<{
                    users: z.ZodOptional<z.ZodArray<z.ZodString>>;
                    teams: z.ZodOptional<z.ZodArray<z.ZodString>>;
                }, z.core.$strip>>;
            }, z.core.$strip>>;
            security: z.ZodOptional<z.ZodObject<{
                secret_scanning: z.ZodOptional<z.ZodEnum<{
                    enabled: "enabled";
                    disabled: "disabled";
                }>>;
                secret_scanning_push_protection: z.ZodOptional<z.ZodEnum<{
                    enabled: "enabled";
                    disabled: "disabled";
                    auto: "auto";
                }>>;
                dependabot_alerts: z.ZodOptional<z.ZodBoolean>;
                dependabot_updates: z.ZodOptional<z.ZodBoolean>;
                code_scanning_recommended: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strip>>;
            permissions: z.ZodOptional<z.ZodObject<{
                remove_individual_collaborators: z.ZodOptional<z.ZodBoolean>;
                teams: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    team: z.ZodString;
                    permission: z.ZodEnum<{
                        push: "push";
                        read: "read";
                        triage: "triage";
                        write: "write";
                        maintain: "maintain";
                        admin: "admin";
                    }>;
                }, z.core.$strip>>>;
            }, z.core.$strip>>;
            archived_repos: z.ZodOptional<z.ZodObject<{
                admin_team_only: z.ZodOptional<z.ZodBoolean>;
                archive_inactive: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
                inactive_days: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
                unarchive_active: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
                archive_patterns: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                keep_active_patterns: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                specific_repos: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString>>>;
            }, z.core.$strip>>;
        }, z.core.$strip>;
    }, z.core.$strip>>>;
    checks: z.ZodOptional<z.ZodObject<{
        enabled: z.ZodArray<z.ZodEnum<{
            "merge-methods": "merge-methods";
            "team-permissions": "team-permissions";
            "branch-protection": "branch-protection";
            "security-scanning": "security-scanning";
            "archived-repos": "archived-repos";
        }>>;
    }, z.core.$strip>>;
}, z.core.$strip>;
export type ComplianceConfig = z.infer<typeof ComplianceConfigSchema>;
//# sourceMappingURL=schema.d.ts.map