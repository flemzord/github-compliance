name: CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  
permissions:
  contents: read
  pull-requests: write
  security-events: write
  actions: read

jobs:
  # Quick validation job that runs first
  validate:
    name: Validate
    runs-on: ubuntu-latest
    outputs:
      is-release: ${{ steps.check.outputs.is-release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check if release
        id: check
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "is-release=true" >> $GITHUB_OUTPUT
          else
            echo "is-release=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate PR title
        if: github.event_name == 'pull_request'
        uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert

  # Main CI job - lint, test, build
  ci:
    name: CI (${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        node-version: ['20', '22']
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint (BiomeJS, Knip, TypeScript)
        if: matrix.node-version == '20'
        run: |
          npm run lint:biome
          npm run lint:knip
          npm run lint:types

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage
        if: matrix.node-version == '20' && github.event_name != 'schedule'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/coverage-final.json
          flags: unittests
          fail_ci_if_error: false

      - name: Build project
        run: npm run build

      - name: Bundle size check
        if: matrix.node-version == '20'
        id: bundle
        run: |
          SIZE_BYTES=$(du -b dist/index.js | cut -f1)
          SIZE_KB=$((SIZE_BYTES / 1024))
          echo "size-kb=$SIZE_KB" >> $GITHUB_OUTPUT

          if [ $SIZE_BYTES -gt 10485760 ]; then
            echo "‚ùå Bundle size exceeds 10MB threshold!"
            exit 1
          fi

          echo "‚úÖ Bundle size: ${SIZE_KB}KB"

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # PR specific actions
  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install and build
        run: |
          npm ci
          npm run build

      - name: Add labels
        uses: actions/labeler@v6
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Size label
        uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: 'size/XS'
          xs_max_size: '10'
          s_label: 'size/S'
          s_max_size: '100'
          m_label: 'size/M'
          m_max_size: '500'
          l_label: 'size/L'
          l_max_size: '1000'
          xl_label: 'size/XL'

      - name: Comment bundle size
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const stats = fs.statSync('dist/index.js');
            const sizeInKB = (stats.size / 1024).toFixed(2);

            const comment = `## üìä Build Report

            **Bundle Size:** ${sizeInKB} KB
            **Node Versions Tested:** 18, 20, 22
            **All Checks:** ‚úÖ Passed

            <details>
            <summary>Details</summary>

            - Linting (BiomeJS, Knip, TypeScript): ‚úÖ
            - Tests with coverage: ‚úÖ
            - Build: ‚úÖ
            - Integration test: ‚úÖ

            </details>

            *Generated for commit ${context.sha.slice(0, 7)}*`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Build Report')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  # Release job
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ci, security]
    if: needs.validate.outputs.is-release == 'true'
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install and build
        run: |
          npm ci
          npm run build

      - name: Publish to NPM
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            compliance-config.example.yml
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}